script: WalkingHere

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class WalkingHere : MonoBehaviour
{
    public AudioSource playSound;
    private void OnTriggerEnter(Collider other)
    {
        playSound.Play();
    }
}


script: Rotation

using UnityEngine;
using System.Collections;

public class Rotation : MonoBehaviour
{
    //Inspiré par le tutoriel de Roll-a-Ball
    // Avant meme quil y a un changement d'image rendu.
    public void Update()
    {   //Le game Object fait une rotation sur soit, Axe d'Y de 20, multiplié par DeltaTime pour faire en sorte qui soit par seconde aulieu d'image par image
        transform.Rotate(new Vector3(0, 20, 0) * Time.deltaTime);
    }
}

script: MainMenu

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
public class MainMenu : MonoBehaviour
{
   public void Playgame()
    {
        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex + 1);
    }
    public void QuitGame()
    {
        Application.Quit();
    }

}


script:Forces

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Forces : MonoBehaviour
{   
    //declaration de class
    // Vitesse et l'inclusion du RigidBody
    public float speed = 0.01f;
    private Rigidbody rb;

    
    // Départ est appelé avant qu'on met a jour les images rendu
    void Start()
    {   //GetComponent sert a préciser une instance que nous feson référence
        //dans notre cas, Rigidbody
        rb = GetComponent<Rigidbody>();
    }

    // Ce qui est mis a jours, qui donne une image rendu, image par image
    void Update()
    {   
        //debug.logwarning met a jours notre console,confirmant le deplacement

        Debug.LogWarning(transform.position);

        //Utilisation d'une reference de position pour faire pousser le gameobject en question
        //en utilisant un empty object puis sa position, ma permit de majuster (x , y, z)
        Vector3 dest = new Vector3(0f, 0f, -10f);
        
        //Code qui utilise la force pour pousser l'objet
        rb.AddForce(dest * speed, ForceMode.Impulse);
    }
}

script: FireBullet

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

//Inspiré par le tutoriel de Fist-Full-Of-Shrimp, video numero 2
//tout en suivant son tutoriel, jai re-utilisé le mon model de fusil pour le cours d'Animation et l'ajout de son
//Déclarion de la classe, Vitesse des balles, position ou sont tiré, utilisation d'un game object pour faire les balles.
public class FireBullet : MonoBehaviour
{
    public float speed = 50f;
    public GameObject bulletObj;
    public Transform frontOfGun;
 
    public static event Action GunFired;
    public void Fire()
    {   
        //Appeler en ordre, le son, spawned bullet et la position, les balles on un rigibody finalment la disparition des balles apres 5 "frame"
        GetComponent<AudioSource>().Play();
        GameObject spawnedBullet = Instantiate(bulletObj, frontOfGun.position, frontOfGun.rotation);
        spawnedBullet.GetComponent<Rigidbody>().velocity = speed * frontOfGun.forward;
        Destroy(spawnedBullet, 5f);
        GunFired?.Invoke();
    }


}
